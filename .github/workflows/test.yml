name: Run Tests

# Trigger workflow on push to any branch and pull requests
on:
  push:
    branches:
      - main
      - dev
      - 'feature/**'  # Include feature branches
  pull_request:
    branches:
      - main
      - dev

# Environment variables available to all jobs
env:
  NODE_VERSION: '18'  # Use Node.js 18 for better performance and security

jobs:
  # Job to test backend
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      # Step 3: Navigate to backend directory
      - name: Navigate to backend directory
        run: cd backend
      
      # Step 4: Install backend dependencies
      - name: Install backend dependencies
        run: npm ci
      
      # Step 5: Run backend tests
      - name: Run backend tests
        run: npm test
        env:
          # Add any test environment variables here
          NODE_ENV: test
          PORT: 3001
      
      # Step 6: Run backend linting (if configured)
      - name: Run backend linting
        run: npm run lint
        continue-on-error: true  # Don't fail if linting is not configured
      
      # Step 7: Check for security vulnerabilities
      - name: Run security audit
        run: npm audit --audit-level moderate
        continue-on-error: true  # Don't fail the build for moderate issues

  # Job to test frontend
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      # Step 3: Navigate to frontend directory
      - name: Navigate to frontend directory
        run: cd frontend
      
      # Step 4: Install frontend dependencies
      - name: Install frontend dependencies
        run: npm ci
      
      # Step 5: Run frontend tests
      - name: Run frontend tests
        run: npm test -- --watchAll=false --coverage --passWithNoTests
        env:
          # Add any test environment variables here
          CI: true
          REACT_APP_API_URL: http://localhost:3001
      
      # Step 6: Run frontend linting (if configured)
      - name: Run frontend linting
        run: npm run lint
        continue-on-error: true  # Don't fail if linting is not configured
      
      # Step 7: Check for security vulnerabilities
      - name: Run security audit
        run: npm audit --audit-level moderate
        continue-on-error: true  # Don't fail the build for moderate issues
      
      # Step 8: Build frontend to ensure it compiles correctly
      - name: Build frontend
        run: npm run build
        env:
          REACT_APP_API_URL: http://localhost:3001

  # Job to run integration tests (optional)
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]  # Wait for unit tests to complete
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'  # Only run on main and dev
    
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      # Step 3: Install backend dependencies
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
      
      # Step 4: Start backend server in background
      - name: Start backend server
        run: |
          cd backend
          npm start &
          sleep 10  # Wait for server to start
      
      # Step 5: Run integration tests (if configured)
      - name: Run integration tests
        run: |
          cd backend
          npm run test:integration
        continue-on-error: true  # Don't fail if integration tests are not configured
        env:
          NODE_ENV: test
          PORT: 3001

  # Job to generate test coverage report
  coverage-report:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
      
      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # Step 3: Generate coverage reports
      - name: Generate coverage reports
        run: |
          echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "### Backend Coverage" >> $GITHUB_STEP_SUMMARY
          if [ -f "backend/coverage/lcov-report/index.html" ]; then
            echo "Backend tests completed with coverage" >> $GITHUB_STEP_SUMMARY
          else
            echo "Backend coverage report not available" >> $GITHUB_STEP_SUMMARY
          fi
          echo "### Frontend Coverage" >> $GITHUB_STEP_SUMMARY
          if [ -f "frontend/coverage/lcov-report/index.html" ]; then
            echo "Frontend tests completed with coverage" >> $GITHUB_STEP_SUMMARY
          else
            echo "Frontend coverage report not available" >> $GITHUB_STEP_SUMMARY
          fi 